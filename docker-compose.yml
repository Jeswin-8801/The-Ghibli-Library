services:
    mongo-db:
        image: mongo
        restart: unless-stopped
        env_file: ./.env
        ports:
            - $MONGODB_LOCAL_PORT:$MONGODB_DOCKER_PORT
        environment:
            MONGO_INITDB_ROOT_USERNAME: $MONGODB_USER
            MONGO_INITDB_ROOT_PASSWORD: $MONGODB_PASSWORD

    mongo-express:
        image: mongo-express
        depends_on:
            - mongo-db
        restart: unless-stopped
        env_file: ./.env
        ports:
            - $MONGO_EXPRESS_PORT:$MONGO_EXPRESS_PORT
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: $MONGODB_USER
            ME_CONFIG_MONGODB_ADMINPASSWORD: $MONGODB_PASSWORD
            ME_CONFIG_MONGODB_URL: "mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongo-db:$MONGODB_DOCKER_PORT/"
            ME_CONFIG_BASICAUTH: false

    spring-boot:
        depends_on:
            - mongo-db
        build: ./backend/ghibli-lib
        restart: on-failure
        env_file: ./.env
        ports:
            - $SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT
        environment:
            SPRING_APPLICATION_JSON: '{
                "spring.data.mongodb.uri" : "mongodb://$MONGODB_USER:$MONGODB_PASSWORD@mongo-db:$MONGODB_DOCKER_PORT/$MONGODB_DATABASE?authSource=admin"
                }'
        stdin_open: true
        tty: true

    setup-populate-db:
        image: alpine/curl
        depends_on:
            - spring-boot
        restart: no
        volumes:
            - ./backend/populate:/data/populate
        entrypoint: >
            /bin/sh -c '
                isAlive() { curl --silent --request GET http://spring-boot:${SPRING_DOCKER_PORT}/actuator/health | grep UP; }
                while ! isAlive; do sleep 1; done
                cd /data/populate
                ./populate.sh
                exit 0;
            '

    react:
        build: ./frontend
        depends_on:
            - setup-populate-db
        environment:
            NODE_ENV: production
        ports:
            - $REACT_LOCAL_PORT:$REACT_DOCKER_PORT
